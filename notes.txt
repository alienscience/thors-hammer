
Generate sequences using a peg like grammar:

  xalphas  = oneOrMore( oneOf(alpha, digit, safe, extra, escape));
  ialpha   = sequence( alpha, zeroOrMore( xalphas ));
  hostname = sequence( ialpha, zeroOrMore( ".", recurse(4) ));
  scheme   = oneOf("http", "ftp", "https")
                .butNot("ldap", "xxx");
  url      = sequence( scheme, "://", hostname, "/" )

  hammer = Hammer.string(url);
  hammer = Hammer.int(-5,5);

Grammar gives a combinatorial explosion - allow for different samplers.

Try nested loops rather than sampling one field at a time.

Generate valid or slightly invalid data:
 
  data = hammer.getValid(); 
  data = hammer.getInvalid();


Internals
----------

A sampler samples all the dimensions in a generator:

    generator.start();

    while (true) {
        Generator g = generator.next();
        if (g == null) return;          // Finished
        int r = randomNumber(g.size()); 
        append(g.get(r));
    } 

Or if continuations were available:
    for (Value<T> v : generator.iterator()) {
       int r = randomNumber(v.size());
       appendToSample(v.get(r));
    }

Generate a Tree not a list
--------------------------

  http|ftp : name . com|org

  => Or -- http -- name -- . -- Or -- com


  sequence( a, b, oneOf(1,2,3, oneOf(4,5,6), 7,8), c)

  sequence - oneOf - oneOf

Playing with construction
-------------------------

  httpUrl = literal("http://")._(hostPort).optional